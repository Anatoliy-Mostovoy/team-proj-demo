{"version":3,"sources":["index.js"],"names":["getFruit","name","Promise","resolve","strawberry","kiwi","apple","asyncMakeSmoothie","console","log","makeSmoothie","then"],"mappings":";;;AAqDC,aAxBD,SAASA,EAASC,GAMTC,OAAAA,QAAQC,QALA,CACbC,WAAY,EACZC,KAAM,EACNC,MAAO,GAEqBL,IAGhC,eAAeM,IACPD,MAAAA,QAAcN,EAAS,SAC7BQ,QAAQC,IAAIH,GAEND,MAAAA,QAAaL,EAAS,QAC5BQ,QAAQC,IAAIJ,GAId,SAASK,IACPV,EAAS,SAASW,KAAKL,IACrBE,QAAQC,IAAIH,GAEZN,EAAS,QAAQW,KAAKN,GAAQG,QAAQC,IAAIJ,MAnD9C,QAAA,oBA6CAE","file":"src.9a64dd6d.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n// try {\n//   console.log('до ошибки');\n//   myVar;\n//   console.log('после ошибки');\n// } catch (error) {\n//   console.dir(error.stack);\n//   console.log('ОШИБКА!!');\n// }\n\n// console.log('после трай');\n\n// const validJson = '{ \"name\": \"Mango\", \"age\": 3 }';\n// const inValidJson = '{ бек вернул такое}';\n\n// try {\n//   console.log('1');\n//   console.log(JSON.parse(inValidJson));\n//   console.log('2');\n// } catch (error) {\n//   console.log(error);\n//   if (error.name === 'SyntaxError') {\n//     console.log('ERROR');\n//   }\n// }\n\n// console.log('all Ok');\n//todo async асинхронная функция всегда возвращает промис!!!\nfunction getFruit(name) {\n  const fruits = {\n    strawberry: 1,\n    kiwi: 2,\n    apple: 3,\n  };\n  return Promise.resolve(fruits[name]); //! метод возвращает значение промиса\n}\n\nasync function asyncMakeSmoothie() {\n  const apple = await getFruit('apple'); //todo await всегда ставиться перед резулттатом возврата просима\n  console.log(apple);\n\n  const kiwi = await getFruit('kiwi');\n  console.log(kiwi);\n}\nasyncMakeSmoothie();\n\nfunction makeSmoothie() {\n  getFruit('apple').then(apple => {\n    console.log(apple);\n\n    getFruit('kiwi').then(kiwi => console.log(kiwi));\n  });\n}\n"]}